// Code generated by applyconfiguration-gen. DO NOT EDIT.

package applyconfigurations

import (
	v1 "github.com/cybozu-go/ofen/api/v1"
	apiv1 "github.com/cybozu-go/ofen/internal/applyconfigurations/api/v1"
	internal "github.com/cybozu-go/ofen/internal/applyconfigurations/internal"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	managedfields "k8s.io/apimachinery/pkg/util/managedfields"
)

// ForKind returns an apply configuration type for the given GroupVersionKind, or nil if no
// apply configuration type exists for the given GroupVersionKind.
func ForKind(kind schema.GroupVersionKind) interface{} {
	switch kind {
	// Group=ofen.cybozu.io, Version=v1
	case v1.SchemeGroupVersion.WithKind("ContainerImageStatus"):
		return &apiv1.ContainerImageStatusApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ImagePrefetch"):
		return &apiv1.ImagePrefetchApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ImagePrefetchSpec"):
		return &apiv1.ImagePrefetchSpecApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ImagePrefetchStatus"):
		return &apiv1.ImagePrefetchStatusApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("NodeImageSet"):
		return &apiv1.NodeImageSetApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("NodeImageSetSpec"):
		return &apiv1.NodeImageSetSpecApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("NodeImageSetStatus"):
		return &apiv1.NodeImageSetStatusApplyConfiguration{}

	}
	return nil
}

func NewTypeConverter(scheme *runtime.Scheme) managedfields.TypeConverter {
	return managedfields.NewSchemeTypeConverter(scheme, internal.Parser())
}
