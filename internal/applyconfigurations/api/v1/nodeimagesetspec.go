// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	corev1 "k8s.io/api/core/v1"
)

// NodeImageSetSpecApplyConfiguration represents a declarative configuration of the NodeImageSetSpec type for use
// with apply.
type NodeImageSetSpecApplyConfiguration struct {
	ImageSet                []ImageSetApplyConfiguration  `json:"imageSet,omitempty"`
	NodeName                *string                       `json:"nodeName,omitempty"`
	ImagePullSecrets        []corev1.LocalObjectReference `json:"imagePullSecrets,omitempty"`
	ImageDownloadRetryLimit *int32                        `json:"imageDownloadRetryLimit,omitempty"`
}

// NodeImageSetSpecApplyConfiguration constructs a declarative configuration of the NodeImageSetSpec type for use with
// apply.
func NodeImageSetSpec() *NodeImageSetSpecApplyConfiguration {
	return &NodeImageSetSpecApplyConfiguration{}
}

// WithImageSet adds the given value to the ImageSet field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ImageSet field.
func (b *NodeImageSetSpecApplyConfiguration) WithImageSet(values ...*ImageSetApplyConfiguration) *NodeImageSetSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithImageSet")
		}
		b.ImageSet = append(b.ImageSet, *values[i])
	}
	return b
}

// WithNodeName sets the NodeName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NodeName field is set to the value of the last call.
func (b *NodeImageSetSpecApplyConfiguration) WithNodeName(value string) *NodeImageSetSpecApplyConfiguration {
	b.NodeName = &value
	return b
}

// WithImagePullSecrets adds the given value to the ImagePullSecrets field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ImagePullSecrets field.
func (b *NodeImageSetSpecApplyConfiguration) WithImagePullSecrets(values ...corev1.LocalObjectReference) *NodeImageSetSpecApplyConfiguration {
	for i := range values {
		b.ImagePullSecrets = append(b.ImagePullSecrets, values[i])
	}
	return b
}

// WithImageDownloadRetryLimit sets the ImageDownloadRetryLimit field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ImageDownloadRetryLimit field is set to the value of the last call.
func (b *NodeImageSetSpecApplyConfiguration) WithImageDownloadRetryLimit(value int32) *NodeImageSetSpecApplyConfiguration {
	b.ImageDownloadRetryLimit = &value
	return b
}
