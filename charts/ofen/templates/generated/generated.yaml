apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "ofen.name" . }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    helm.sh/chart: '{{ include "ofen.chart" . }}'
  name: '{{ template "ofen.fullname" . }}-controller-manager'
  namespace: '{{ .Release.Namespace }}'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "ofen.name" . }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    helm.sh/chart: '{{ include "ofen.chart" . }}'
  name: '{{ template "ofen.fullname" . }}-leader-election-role'
  namespace: '{{ .Release.Namespace }}'
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "ofen.name" . }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    helm.sh/chart: '{{ include "ofen.chart" . }}'
  name: '{{ template "ofen.fullname" . }}-controller-manager-role'
rules:
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
      - update
  - apiGroups:
      - ""
    resources:
      - nodes
      - secrets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ofen.cybozu.io
    resources:
      - imageprefetches
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ofen.cybozu.io
    resources:
      - imageprefetches/finalizers
      - nodeimagesets/finalizers
    verbs:
      - update
  - apiGroups:
      - ofen.cybozu.io
    resources:
      - imageprefetches/status
      - nodeimagesets/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - ofen.cybozu.io
    resources:
      - nodeimagesets
    verbs:
      - create
      - delete
      - deletecollection
      - get
      - list
      - patch
      - update
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "ofen.name" . }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    helm.sh/chart: '{{ include "ofen.chart" . }}'
  name: '{{ template "ofen.fullname" . }}-imageprefetch-editor-role'
rules:
  - apiGroups:
      - ofen.cybozu.io
    resources:
      - imageprefetches
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ofen.cybozu.io
    resources:
      - imageprefetches/status
    verbs:
      - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "ofen.name" . }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    helm.sh/chart: '{{ include "ofen.chart" . }}'
  name: '{{ template "ofen.fullname" . }}-imageprefetch-viewer-role'
rules:
  - apiGroups:
      - ofen.cybozu.io
    resources:
      - imageprefetches
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ofen.cybozu.io
    resources:
      - imageprefetches/status
    verbs:
      - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "ofen.name" . }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    helm.sh/chart: '{{ include "ofen.chart" . }}'
  name: '{{ template "ofen.fullname" . }}-nodeimageset-editor-role'
rules:
  - apiGroups:
      - ofen.cybozu.io
    resources:
      - nodeimagesets
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ofen.cybozu.io
    resources:
      - nodeimagesets/status
    verbs:
      - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "ofen.name" . }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    helm.sh/chart: '{{ include "ofen.chart" . }}'
  name: '{{ template "ofen.fullname" . }}-nodeimageset-viewer-role'
rules:
  - apiGroups:
      - ofen.cybozu.io
    resources:
      - nodeimagesets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ofen.cybozu.io
    resources:
      - nodeimagesets/status
    verbs:
      - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "ofen.name" . }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    helm.sh/chart: '{{ include "ofen.chart" . }}'
  name: '{{ template "ofen.fullname" . }}-leader-election-rolebinding'
  namespace: '{{ .Release.Namespace }}'
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: '{{ template "ofen.fullname" . }}-leader-election-role'
subjects:
  - kind: ServiceAccount
    name: '{{ template "ofen.fullname" . }}-controller-manager'
    namespace: '{{ .Release.Namespace }}'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "ofen.name" . }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    helm.sh/chart: '{{ include "ofen.chart" . }}'
  name: '{{ template "ofen.fullname" . }}-controller-manager-rolebinding'
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: '{{ template "ofen.fullname" . }}-controller-manager-role'
subjects:
  - kind: ServiceAccount
    name: '{{ template "ofen.fullname" . }}-controller-manager'
    namespace: '{{ .Release.Namespace }}'
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  labels:
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "ofen.name" . }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    helm.sh/chart: '{{ include "ofen.chart" . }}'
  name: '{{ template "ofen.fullname" . }}-imageprefetch-validation.cybozu.io'
  namespace: '{{ .Release.Namespace }}'
spec:
  failurePolicy: Fail
  matchConstraints:
    resourceRules:
      - apiGroups:
          - ofen.cybozu.io
        apiVersions:
          - v1
        operations:
          - CREATE
          - UPDATE
        resources:
          - imageprefetches
  paramKind:
    apiVersion: v1
    kind: ConfigMap
  validations:
    - expression: |
        object.spec.images.size() > 0
      message: spec.images must not be empty
    - expression: |
        !(has(object.spec.allNodes) && object.spec.allNodes) || !has(object.spec.replicas)
      message: spec.replicas cannot be set when spec.allNodes is true
    - expression: |
        (has(object.spec.allNodes) && object.spec.allNodes) || (has(object.spec.replicas) && object.spec.replicas > 0)
      message: spec.replicas must be greater than 0 when spec.allNodes is false
    - expression: |
        !has(object.spec.replicas) || object.spec.replicas >= 0
      message: spec.replicas must be a non-negative number
    - expression: "!has(object.spec.imagePullSecrets) || \n(\n  has(object.spec.imagePullSecrets) && \n  size(object.spec.imagePullSecrets) > 0 && \n  object.spec.imagePullSecrets.all(s, has(s.name) && s.name != '')\n)\n"
      message: spec.imagePullSecrets must be a list of non-empty names
    - expression: |
        object.spec.images.all(img, params.data.exists(registry, img.startsWith(params.data[registry])))
      message: spec.images must start with one of the permitted registries
    - expression: |
        !has(object.spec.nodeSelector) ||
        (
          has(object.spec.nodeSelector) &&
          object.spec.nodeSelector.all(k, k != '' && object.spec.nodeSelector[k] != '')
        )
      message: spec.nodeSelector must be a map with non-empty keys and values
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  labels:
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "ofen.name" . }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    helm.sh/chart: '{{ include "ofen.chart" . }}'
  name: '{{ template "ofen.fullname" . }}-nodeimageset-validation.cybozu.io'
  namespace: '{{ .Release.Namespace }}'
spec:
  failurePolicy: Fail
  matchConstraints:
    resourceRules:
      - apiGroups:
          - ofen.cybozu.io
        apiVersions:
          - v1
        operations:
          - CREATE
          - UPDATE
        resources:
          - nodeimagesets
  paramKind:
    apiVersion: v1
    kind: ConfigMap
  validations:
    - expression: |
        object.spec.images.size() > 0
      message: spec.images must not be empty
    - expression: |
        object.spec.images.all(img, params.data.exists(registry, img.startsWith(params.data[registry])))
      message: spec.images must start with one of the permitted registries
    - expression: |
        has(object.spec.nodeName) && object.spec.nodeName != ''
      message: spec.nodeName must be specified and not empty
    - expression: |
        has(object.spec.registryPolicy) && object.spec.registryPolicy in ['Default', 'MirrorOnly']
      message: spec.registryPolicy must be either 'Default' or 'MirrorOnly'
    - expression: |
        !has(object.spec.imagePullSecrets) || (size(object.spec.imagePullSecrets) > 0 && object.spec.imagePullSecrets.all(s, has(s.name) && s.name != ''))
      message: spec.imagePullSecrets must be a list of non-empty names
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicyBinding
metadata:
  labels:
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "ofen.name" . }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    helm.sh/chart: '{{ include "ofen.chart" . }}'
  name: '{{ template "ofen.fullname" . }}-imageprefetch-validation.cybozu.io'
  namespace: '{{ .Release.Namespace }}'
spec:
  paramRef:
    name: '{{ template "ofen.fullname" . }}-registry-allowlist'
    namespace: '{{ .Release.Namespace }}'
    parameterNotFoundAction: Deny
  policyName: '{{ template "ofen.fullname" . }}-imageprefetch-validation.cybozu.io'
  validationActions:
    - Deny
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicyBinding
metadata:
  labels:
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "ofen.name" . }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    helm.sh/chart: '{{ include "ofen.chart" . }}'
  name: '{{ template "ofen.fullname" . }}-nodeimageset-validation.cybozu.io'
  namespace: '{{ .Release.Namespace }}'
spec:
  paramRef:
    name: '{{ template "ofen.fullname" . }}-registry-allowlist'
    namespace: '{{ .Release.Namespace }}'
    parameterNotFoundAction: Deny
  policyName: '{{ template "ofen.fullname" . }}-nodeimageset-validation.cybozu.io'
  validationActions:
    - Deny
